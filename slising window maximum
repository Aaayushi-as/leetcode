class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        // 1 2 3 1 4 5 2 3 6
        Deque<Integer> dq = new LinkedList<Integer>();
        int res[] = new int[nums.length-k+1];
        int r=0;
        for(int i =0;i<nums.length;i++)
        {
            //check window size
            //2==0 iteration 4
            if(!dq.isEmpty() && dq.peek()==i-k)
            {
                dq.poll();
               //remove 5 iteration 8
            }

           //remove small element exist in the window
           while(!dq.isEmpty() && nums[dq.peekLast()]<nums[i])
             {
                dq.pollLast();
                //remove 1(index =0) || iteration 2
                //remove 2(index =1) || iteration 3
                //remove 1,3(index =3,2) || iteration 5 
                //remove 4(index =4) || iteration 6
                //remove 3,4 (index =7,6) iteration 9
             }
          //add element index
          dq.offer(i);
           //add 1 || iteration 1 [0]
            //add 2 || iteration 2 [1]
            //add 3 || iteration 3 [2]
            //add 1 || iteration 4 [2,3]
            //add 4 || iteration 5 [4]
             //add 5 || iteration 6 [5]
             // add 2 || iteration 7 [5,6]
             //add 3 ||. iteration 8 [5,6,7]
             //add 6|| iteration 9 [8]

          // add largest element which exist into k window into the result array 
          if(i>=k-1)
          {
              res[r++]=nums[dq.peek()];
               //add 3 || iteration 3
              //add 3 || iteration 4
              //add 4 || iteration 5
              //add 5 || iteration 6
              //add 5 || iteration 7
              //add 5 || iteration 8
              //add 6 || iteration 9
          }
        
        }
  return res;  
}}
