class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        helper( 0 , candidates , target , new ArrayList<>() , ans );
        return ans;
        
    }
   void helper(int i , int[] candidates , int target , ArrayList<Integer>com ,List<List<Integer>> ans ){
       if(i == candidates.length ){
          
          if( target == 0){
           ans.add(new ArrayList<>(com));
           }
          
           return;
       }
       // condition to pick the element 
       if(candidates[i] <= target){
           com.add(candidates[i]);
           helper( i , candidates ,target-candidates[i] , com , ans );
           com.remove(com.size()-1); // backtracking 
       }
       //condition to not pick the element
       helper(i+1 , candidates ,target , com , ans);

   }
}
