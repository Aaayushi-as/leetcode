class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer , Integer> mpp = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            mpp.put(nums[i] , mpp.getOrDefault(nums[i] , 0)+1);

        }
        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(
            (a, b) -> b.getValue() - a.getValue());
        for(int key : mpp.keySet()){
            pq.offer(new Pair <Integer , Integer>(key , mpp.get(key)));
        }
        int ans[] = new int[k];
        int j=0;
        while(k>0){
            ans[j++] = pq.poll().getKey();
            k--;
        }
        return ans;
        
    }
}
