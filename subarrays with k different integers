class Solution {
  public int subarraysWithKDistinct(int[] nums, int k) {

    return subarraysWithKSize(nums, k) - subarraysWithKSize(nums, k - 1);
  }
    
    //Function for at-most k distinct
    
  public int subarraysWithKSize(int[] nums, int k) {
  int i=0;
        int ans =0;
        int n = nums.length;
        HashMap<Integer , Integer > mpp = new HashMap<>();
        for(int j=0;j<n;j++){
            mpp.put(nums[j] , mpp.getOrDefault(nums[j] , 0)+1);
            while(mpp.size()>k){
                if(mpp.get(nums[i])>1){
                    mpp.put(nums[i] , mpp.get(nums[i])-1);
                }
                else{
                    mpp.remove(nums[i]);
                }
                i++;
            }
            ans += (j-i+1);


        }
        return ans;
        
    }
}
