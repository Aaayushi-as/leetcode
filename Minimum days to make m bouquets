class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        long val = ( long) (m*k);
        int n = bloomDay.length;
       int min = Integer.MAX_VALUE , max = Integer.MIN_VALUE;
       for(int i=0;i<n;i++){
           min = Math.min(min ,bloomDay[i]);
           max = Math.max(max , bloomDay[i]);
       }
       if( val>n){
           return -1;
       }
       int low = min;
       int high = max;
       int ans =-1;
       while(low<=high){
           int mid = low + (high-low)/2;
           if(possible(bloomDay, mid , m , k)== true){
               ans = mid;
               high = mid-1;

           }
           else{
               low = mid+1;
           }
       }
       return ans ;




        
    }
    public boolean possible(int [] arr , int day , int m , int k){
        int cnt =0;
        int boq = 0;
        for(int i =0;i<arr.length;i++){
            if(arr[i]<=day){
                cnt++;
            }
            else{
                boq += (cnt/k);
                cnt =0;
            }
        }
        boq += (cnt/k);
        if(boq >= m){
            return true;
        }
        else{
            return false;
        }

    }
}
