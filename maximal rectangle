class Solution {
    public int maximalRectangle(char[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int [] ans = new int [m];
        int max =0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]== '1'){
                    ans[j] += 1;
                }
                else{
                    ans[j] = 0;
                }
            }
            max = Math.max(max ,maximalrec(ans));
            


        }
        return max;

        
    }

    int maximalrec(int[] ans ){
        int m = ans.length;
       
        Stack <Integer> st = new Stack<>();
        int[] pse = new int[m];
        for(int i =0;i<m;i++){
            while(!st.isEmpty() && ans[i]<ans[st.peek()]){
                st.pop();
            }
            if(!st.isEmpty()){
                pse[i] = st.peek();
            }
            else{
                pse[i] = -1;
            }
            st.push(i);
        }

        st = new Stack<>();
        int nse[]= new int[m];
        for(int i=m-1;i>=0;i--){
            while(!st.isEmpty() && ans[i] <= ans[st.peek()]){
                st.pop();

            }
            if(!st.isEmpty()){
                nse[i] = st.peek();
            }
            else{
                nse[i] = m;
            }
            st.push(i);
        }
        int maxa =0;
        for(int i=0;i<m;i++){
            int width = nse[i]-pse[i]-1;
        int height = ans[i];
        int area = height*width;

        
        maxa = Math.max(maxa , area);
            
        }
        
        return maxa;


    }
}
